#!/usr/bin/env node

'use strict';

var fs      = require('fs');
var spawn   = require('child_process').spawn;
var fork    = require('child_process').fork;
var chalk   = require('chalk');
var Liftoff = require('liftoff');
var argv    = require('minimist')(process.argv.slice(2));
var dir     = require('node-dir');

function log() {
  console.log.apply(null, ["[ " + chalk.red('Lingon CLI') + " ]"].concat(
    Array.prototype.slice.call(arguments, 0)
  ));
}

//-------------------------------
// LINGON VERSION
//-------------------------------
if(!!argv.v || argv._[0] == 'version') {
  var pkg = require('../package.json');
  log('Lingon CLI version:', pkg.version);
}

//-------------------------------
// LINGON NEW
//-------------------------------
if (argv._[0] == 'new') {
  var projectName = argv._[1];
  var templateRepo;
  var projectPath;
  var templates = {
    angular: 'git@github.com:jpettersson/lingon-ng-template.git',
    minimal: 'git@github.com:javoire/lingon-template-minimal.git'
  }

  if (argv.t && templates.hasOwnProperty(argv.t)) {
    templateRepo = templates[argv.t];
  }Â else {
    templateRepo = templates.minimal;
  };

  var args = ['clone', templateRepo];

  if (projectName) {
    args.push(projectName);
    projectPath = process.cwd() + '/' + projectName;
  } else {
    console.log(chalk.red('Please specify a project name! E.g. \'lingon new my-project\''));
    process.exit()
  }

  if (fs.existsSync(projectPath)) {
    console.log(chalk.red('A folder with the name \'' + projectName +
        '\' already exists! Please choose a different name.'));
    process.exit(1);
  }

  log('Initializing lingon project...');

  // TODO: check if git is installed on system

  // Clone lingon-ng-template and install dependencies
  var gitClone = spawn('git', args, { stdio: 'ignore', cwd: process.cwd });
  gitClone.on('exit', function(code) {

    var rmGitDir = spawn('rm', ['-rf', projectPath + '/.git'], { stdio: 'inherit', cwd: process.cwd });
    rmGitDir.on('exit', function(code) {

      // read paths to print to stdout
      dir.paths(projectPath, function(err, paths) {
        if (err) throw err;
        paths.files.forEach(function(path) {
          console.log(chalk.green('  create ') + path.replace(process.cwd() + '/', ''));
        })

        console.log(chalk.green('  run ') + 'npm install');
        var npmInstall = spawn('npm', ['install'], { stdio: 'inherit', cwd: projectPath });
        npmInstall.on('exit', function(code) {

          console.log(chalk.green('  run ') + 'bower install');
          var npmInstall = spawn('node_modules/bower/bin/bower', ['install'], { stdio: 'inherit', cwd: projectPath });
          npmInstall.on('exit', function(code) {

            log(chalk.green('All done!'));
            process.exit()
          });
        });
      });
    })

    // TODO: Replace all string occurences of project-name with specified project name argument (?)
  });

  return;
};

//-------------------------------
// LINGON PROCESS
//-------------------------------
var cli = new Liftoff({
  processTitle: 'lingon',
  moduleName: 'lingon',
  configName: 'lingon'
});

cli.launch({
  cwd: argv.cwd,
  configPath: argv.myappfile,
  require: argv.require,
  completion: argv.completion
}, function handleArguments(env) {
  var argv = env.argv;

  if (!env.configPath) {
    log(chalk.red('No lingon.js file found'));
    process.exit(1);
  }

  if (!env.modulePath) {
    log(chalk.red('No local lingon install found in'), chalk.magenta(env.cwd));
    log(chalk.yellow('Try running: npm install lingon'));
    process.exit(1);
  }

  global.lingonCliVersion = env.modulePackage.version;

  // Change working directory to the one containing lingon.js
  process.chdir(env.configBase);

  // Start new lingon sub process
  var lingonProcess;
  var spawnLingonProcess = function spawnLingonProcess() {
    if(lingonProcess) {
      log('Configuration changed. Restarting Lingon process!');
      lingonProcess.removeAllListeners('exit');
      lingonProcess.kill();
      lingonProcess = null;
    }

    lingonProcess = fork(env.configPath, process.argv.slice(2));
    lingonProcess.on('exit', function(code) {
      process.exit(code);
    });
  };

  // setting up a file watcher to reload the lingon process when the
  // lingon.js file has been modified
  var lingonFileWatch;
  var setupWatcher = function setupWatcher() {
    lingonFileWatch = fs.watch(env.configPath, function() {
      lingonFileWatch.close();
      spawnLingonProcess();

      // wait a moment until continuing to watch for changes, that way
      // any swap files will be resolved and multiple events per change
      // can _hopefully_ be prevented
      setTimeout(function() {
        setupWatcher();
      }, 3000);
    });
  };

  spawnLingonProcess();
  setupWatcher();
});
